# See https://yaml-multiline.info for various types of quotes
# Some processing on multiline strings happens in arguments.rb too

debug:
  -

screenshot:
  -

help:
  -

add_scales:
  - show these additional scales
  - SCALE1,SCALE2,...

remove_scales:
  - "subtract the holes of\nthese scales from the primary one"
  - SCALE1,SCALE2,...

no_add_holes:
  - |
    for holes from the primary scale, take remarks,
    colors and scale-name from the additional scales; but 
    do not add any new holes
    
transpose_scale:
  - |
    transpose the scale to given
    key (e.g. d) or by semitones (e.g. 12st).  This would be helpful,
    if you want to practice e.g. the d-major scale on a chromatic
    harmonica of key c. Or if you want to play e.g. in third position,
    you may transpose by 7st (= perfect fifth), as the scales are
    generally notated in second position.  In any case: for a diatonic
    harmonica your mileage may vary, as not all notes are available
  - KEY_OR_SEMITONES

display:
  - "initial display, ARG can be one of:\n
    <%=$display_choices[0..3].map {|c| c.to_s.gsub('_','-')}.join(', ')%>\n
    <%=$display_choices[4..-1].map {|c| c.to_s.gsub('_','-')}.join(', ')%>"
  - ARG

comment:
  - "initial comment, ARG can be one of one of:\n
    <%=$comment_choices[$mode][0..3].map {|c| c.to_s.gsub('_','-')}.join(', ')%>,\n
    <%=$comment_choices[$mode][4..-1].map {|c| c.to_s.gsub('_','-')}.join(', ')%>"
  - ARG
  
ref:
  - reference hole used e.g. in some displays
  - HOLE

fast:
  - samples for notes are played for half a second only

no_fast:
  - samples for notes are played for one second
  
immediate:
  - show correct sequence of holes right away

no_progress:
  - "do not check for correctness of played holes,\njust show, what you play"
  
loop:
  - |
    when the sequence has been played correctly, do not advance,
    but rather query the same sequence again; repeat until you press
    RETURN

no_loop:

  - inverse of --no-loop

auto:
  - generate audio samples without user intervention
  
hole:
  - start with calibration from this hole and on
  - HOLE

tags_all:
  - |
    filter licks and keep those
    having ALL of the given tags. For a single tag, this option
    has the same effect as --tags-any
  - TAG1,TAG2,...

tags_any:
  - |
    filter licks and keep those
    having ANY of the given tags (example: --tags-any scales,classic).
  - TAG1,TAG2,...
    
drop_tags_all:
  - |
    filter licks and drop those
    having ALL of the given tags. For a single tag, this option has the
    same effect as --drop-tags-any
  - TAG1,TAG2,...

drop_tags_any:
  - |
    filter licks and drop those
    having ANY of the given tags
  - TAG1,TAG2,...

licks:
  - |
    specify all the licks to use by their name;
    helpful if you have specific licks in mind e.g. for chords and
    turnaround. If you use this option, the options to select via tags
    (e.g. --tags-all) are ignored.
  - NAME1,NAME2,...

max_holes:
  - |
    filter licks and keep those, that have
    at maximum this number of holes
  - NUMBER

min_holes:
  - |
    filter licks and keep those, that have
    at minimum this number of holes
  - NUMBER
  
holes:
  - play the sequence of holes, even if a sample is available
  
reverse:
  - play the sequence of holes but reverse it first
  
start_with:
  - |
    the name of the first lick to play;
    accepts the special values 'last' or 'l' to repeat the last lick
    (2l, 3l for earlier licks).

    Use '--start-with iter' to iterate through all selected
    licks one by one
    use '--start-with foo,iter' to start at lick foo; 
    'cycle' instead of 'iter' starts all over at the end.  
  - LICK_OR_L

iterate:
  - |
    how to iterate through all
    selected licks; this can be either 'random' (pick licks at random)
    or 'cycle' (one lick after the other and then again). Both can be
    abbreviated, the default is 'random'.
  - RANDOM_OR_CYCLE

partial:
  - |
    to make the mode 'licks' more
    challenging and to improve the learning result, you may let only
    parts of the recording be played.

    Examples for this option are:

      --partial 1/3@b, 1/4@x or 1/2@e, which would
      play: the first third of the recording, any randomly chosen
      quarter (1/4) of it or the last half (but at least one
      second). 
 
      --partial 1@b, 1@e or 2@x play the given number of
      seconds or holes (1 or 2) at the given position (b=begin,
      x=random, e=end) 

      as a special case --part 0 plays nothing initially.

      This can also be abbreviated as -p 0 and memorized as 'play
      nothing' initially; but of course, when the mode has started,
      you may always request a replay with '.'.
  - PARTIAL_SPEC
  
time_slice:
  - |
    time slice (one of short,
    medium, long) for sensing holes played. In each time slice a
    predefined number of holes can be recognized. The default value is
    'medium', but if your computer is slow, 'long' might be more
    appropriate. If your computer is fast, 'short' might work too,
    which will allow harpwise to follow your playing faster
    (e.g. during warbles).

    However, if you choose 'short' and your computer cannot keep up,
    harpwise will lag behind and show holes only (long) after you have
    played them; in such cases harpwise will issue a warning message
    now and then.

    If lagging occurs, you will get a detailed message on program
    termination, that will allow to judge the situation.
  - SHORT_MEDIUM_LONG

viewer:
  - |
    Viewer for images (e.g. of players); can be
    'none' or one of the external programs 'feh' or 'chafa'
    which need to be installed first.
  - NONE_FEH_CHAFA
  
terse:
  - |
    Be somewhat less verbose than usual. The exact effect
    (if any) depends on the subcommand chosen.
  
scale_over_lick:
  - |
    For modes play and print: interpret
    a given name as a scale if it is known as a scale as well as a
    lick.  By default such a name would be treated as a lick.

read_fifo:
  - |
    For mode listen, licks, quiz: when in the main
    interactive view, read keys from fifo /tmp/harpwise_fifo too.
    This can be useful when automizing certain aspects of its
    operation. The name of the fifo is fixed.

difficulty:
  - |
    For mode quiz: Difficulty of
    questions asked; if you should identify or reproduce one of a set
    of choices (e.g. when hearing intervals), the difficulty usually
    gives the size of the set. A percentage value between 0 an 100,
    chooses easy or hard at random, with e.g. 20 meaning one time in
    five (i.e. at a rate of 20%) 'hard' and four times 'easy'; so
    larger numbers are harder and 100 would be all 'hard'. This option
    defaults to 'easy'.
  - EASY_OR_HARD_OR_PERCENT

sharps:
  - |
    When printing notes, prefer sharps (e.g. as)
    
flats:
  - |
    When printing notes, prefer flats (e.g. bf)
    
options:
  - |
    show full list of mode specific options

adhoc_lick:
  - |
    Adhoc-lick on commandline.
    With this option you may give a lick on the commandline to work
    with and avoid adding i to your lickfile first.
  - HOLES_WITH_COMMAS


# See https://yaml-multiline.info for various types of quotes
# Some processing on multiline strings happens in arguments.rb too

play:
  licks: |
    all licks selected (e.g. by option -t). Add 'radio' as an argument
    to turn harpwise into a lick-radio to play without interruption
    (but repeats); another optional argument can be the number of
    repeats
  pitch: |
    play an interactive, adjustable pitch; this may help to find the
    key of a song by ear-comparison
  interval, inter: |
    interactive, adjustable interval given as arguments
  progression, prog: |
    take a base and some semitone diffs, then play it
  chord: |
    play the given holes or notes simultanously as a chord
  user: |
    play back (if any), what you (the user) have recorded in mode
    'licks' before
print:
  licks-details: |
    all licks currently selected (e.g. by option -t) with details
  licks-list: |
    terse list of selected licks (e.g. by option -t) with hole count
  licks-list-all: |
    terse list of all licks (disregarding e.g option -t)
  licks-with-tags: |
    list licks (each with its tags) according to the various tag-options
  licks-tags-stats: |
    statistics for all known licks and their tags
  licks-history: |
    show, which licks you played recently in mode licks; the shortcuts
    ('l', '2l', ...) from the output can be used as arguments to
    option --start-with
  licks-starred: |
    show all starred licks
  licks-dump: |
    dump all selected licks in json-format
  holes-history: |
    show, which holes you played recently, from any mode
  scales: |
    list of all scales with hole count
  intervals: |
    print all known intervals
  player, players: |
    print details about players matching argument or a list of all
    known players
tools:
  transpose: |
    transpose a sequence of holes between keys
  shift: |
    shift a sequence of holes by the given number of semitones
  keys: |
    print a chart with keys and positions centered around current key
  chart: |
    various harmonica charts for current key; add option --ref for
    more charts
  notes-major, notes: |
    print notes of major scale for given key
  progression, prog: |
    take a base and some semitone diffs, then spell them out
  interval, inter: |
    calculate and print interval between two notes
  chords: |
    print chords i, iv and v for current key
  transcribe: |
    transcribe given audio-file approximately
  search-in-licks: |
    search given sequence of holes (or equiv) among licks; the same
    ordering of holes is required
  search-in-scales: |
    search given lick or sequence of holes (or equiv) among scales;
    ordering of holes is not important
  search-scale-in-licks: |
    search given scale in all licks (selected e.g. by -t)
  edit-licks: |
    invoke editor on your lickfile 
  edit-config: |
    invoke editor on your personal config file
    <%= $early_conf[:config_file_user] %>
  diag: |
    help with diagnosing problems with your sound system
quiz:
  all, ran, random: |
    all flavours, one at random
  scales: |
    flavours related with scales at random
  mic: |
    flavours, that use the microphone; most of them switch to
    listen-perspective
  no-mic: |
    flavours, that do not use the microphone, so that no harp is
    needed; but these flavours are not necessarily silent and may
    still play sounds
  silent: |
    flavours, that can be tried with muted speakers
  inters: |
    flavours, that revolve around intervals
  layout: |
    flavours, that deal with the layout (holes to notes) of the harp
  choose: |
    choose flavour right away (only as extra-argument on commandline)
  players: |
    harpwise shows details about a famous player and asks for his or
    her name
  hear-scale: |
    harpwise plays the holes of a scale and asks for its name
  not-in-scale: |
    harpwise picks a scale at random and modifies it: holes are
    shuffled and one is replaced with a foreign hole; this modified
    scale is played and you should find the foreign hole. The holes
    are disguised as h1, h2, and so on. Help allows to compare the
    modified scale with the original, either shuffled or ascending
  match-scale: |
    plays a random sequence of holes, that are either a subset of one
    or many scales and asks for the name of the single or shortest
    scale containing all these holes
  play-scale: |
    gives the name of a scale and asks to play it
  hear-inter: |
    plays an interval and asks for its name
  add-inter: |
    gives a hole and an interval and asks for the resulting hole,
    which is obtained by either adding or subtracting
  play-inter: |
    names a hole and an interval which resolves to a hole; then asks
    to play back both holes
  tell-inter: |
    names two holes and asks for the interval between
  hear-key: |
    plays a sequence of notes starting from a random key (i.e. its
    base-note); asks for this key (rather than for the matching
    harmonica)
  play-shifted: |
    wise computes a sequence of holes, that can be shifted by an
    interval; it plays the original unshifted sequence and names and
    plays the first hole of the shifted sequence; then you should play
    BOTH the unshifted and shifted sequence together
  key-harp-song: |
    gives a key of harmonica and asks for the matching
    key of song (2nd position) or vice versa
  hole-note: |
    gives a hole and asks for the note or vice versa; this of course
    depends on the key of the harp, which you might want to change now
    and then to broader coverage
  hole-note-key: |
    picks (and hides) a new key for the harp at random; then, for a
    named hole-set (e.g. 'blow'), gives holes and matching notes
    (which depend on the hidden key of harp); then asks for the key
  hole-hide-note: |
    picks a new key at random and a named hole-set; then shows the
    hole-set, but hides one note; then asks for the hidden note
  keep-tempo: |
    plays a number of beats defining a certain tempo; then some
    silence and then some final beats. You are expected to play along
    and keep the given tempo throughout; harpwise records your playing
    and checks, how well you kept the tempo
  hear-tempo: |
    plays a tempo and asks for its bpm
  replay: |
    harpwise plays a sequence of holes and asks you to play it back    
develop:
  man: |
    produce man page from erb-template
  diff: |
    compare produced man page with usage
  selftest, st: |
    perform selftest with special regard to the environment
  unittest, ut: |
    unittest for features, that cannot easily be tested within the
    main test program
  widgets, wt: |
    excercise selected widgets to be tested

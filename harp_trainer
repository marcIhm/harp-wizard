#!/usr/bin/env ruby

#
# Main entry point: Load and orchestrate functions, handle global vars
#

require 'set'
require 'yaml'
require 'json'
require 'fileutils'
require 'open3'
require 'pp'
require 'sys/proctable'
require 'tmpdir'
require_relative 'lib/helper'
require_relative 'lib/arguments'
require_relative 'lib/config'
require_relative 'lib/interaction'
require_relative 'lib/sound_driver'
require_relative 'lib/analyze'
require_relative 'lib/licks'
require_relative 'lib/get_hole'
require_relative 'lib/listen'
require_relative 'lib/play'
require_relative 'lib/calibrate'
require_relative 'lib/quiz'

$program_start = Time.now.to_f

myself = File.basename($0)
Sys::ProcTable.ps{ |p|
  err "An instance of this program is already running: pid: #{p.pid}, commandline: '#{p.cmdline}'" if Process.pid != p.pid && p.cmdline[myself] && p.cmdline['ruby']
}

check_installation

$term_height, $term_width = prepare_screen

set_global_vars_early

$conf = read_technical_config

$mode, $type, $key, $scale, $opts = parse_arguments

# we need to have mode for this
calculate_screen_layout
  
set_global_vars_late
$harp, $harp_holes, $harp_notes, $scale_holes, $scale_notes, $hole2rem, $hole2flags, $semi2hole, $note2hole, $intervals, $dsemi_harp = read_musical_config

$chart, $hole2chart = read_chart
$licks = read_licks if $mode == :play || $mode == :memorize

err "Option '--ref' needs a valid hole as an argument, not '#{$opts[:ref]}'" if $opts[:ref] && !$harp_holes.include?($opts[:ref])
$hole_ref = $opts[:ref]

check_screen

$freq2hole = read_calibration unless $mode == :calibrate

if $opts[:testing]
  dumpfile = '/tmp/' + File.basename($0) + '_dumped_for_testing.json'
  File.delete(dumpfile) if File.exists?(dumpfile)
  structure = {scale: $scale, scale_holes: $scale_holes, licks: $licks}
  File.write(dumpfile, JSON.pretty_generate(structure))
end

Thread.report_on_exception = false


Signal.trap('SIGINT') do
  print "\e[#{$line_call2}H" if $move_down_on_exit
  fail "\nexit on ctrl-c" if $opts[:debug]
  puts "\nexit on ctrl-c"
  exit 1
end


if [:listen, :quiz, :memorize].include?($mode)
  Signal.trap('WINCH') do
    $ctl_sig_winch = true
  end
  Signal.trap('CONT') do
    system('clear')
    prepare_term
    $ctl_redraw = true
  end
end


at_exit do
  sane_term
  Thread.list.each do |thread|
    thread.exit unless thread == Thread.current
  end
  # give processes started by threads some time to terminate
  sleep 0.1 
end


# some regression tests
note2semi('a4') == 0 or fail 'Internal error'
semi2note(0) == 'a4' or fail 'Internal error'

case $mode
when :quiz
  do_quiz
when :memorize
  do_quiz
when :listen
  do_listen
when :play
  do_play
when :calibrate
  if $opts[:auto]
    do_calibrate_auto
  else
    do_calibrate_assistant
  end
end
